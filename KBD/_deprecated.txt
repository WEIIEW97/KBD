def generate_parameters_linear(
    path: str,
    table_path: str,
    save_path: str,
    disjoint_depth_range: tuple,
    compensate_dist: float = 200,
    scaling_factor: float = 10,
    plot: bool = False,
):
    df, focal, baseline = preprocessing(path=path, table_path=table_path)

    actual_depth = df[GT_DIST_NAME].values
    avg_50x50_anchor_disp = df[AVG_DISP_NAME].values
    error = df[GT_ERROR_NAME].values

    jlm = JointLinearSmoothingOptimizer(
        actual_depth,
        avg_50x50_anchor_disp,
        focal,
        baseline,
        disjoint_depth_range,
        compensate_dist,
        scaling_factor,
        apply_weights=True,
        apply_l2=True,
    )

    linear_model1, res, linear_model2 = jlm.run()

    param_path = os.path.join(save_path, LINEAR_OUT_PARAMS_FILE_NAME)

    k_ = float(np.float64(res[0]))
    delta_ = float(np.float64(res[1]))
    b_ = float(np.float64(res[2]))

    linear_model1_params = get_linear_model_params(linear_model1)
    linear_model2_params = get_linear_model_params(linear_model2)

    ### do not support the shared pointer

    def create_default_linear_model_params():
        default_linear_model = LinearRegression()
        default_linear_model.coef_ = np.array([1.0])
        default_linear_model.intercept_ = np.array(0.0)
        return get_linear_model_params(default_linear_model)

    params_dict = OrderedDict(
        [
            (
                f"{0}-{disjoint_depth_range[0]-compensate_dist}",
                OrderedDict(
                    [
                        ("k", 1),
                        ("delta", 0),
                        ("b", 0),
                        ("linear_model_params", create_default_linear_model_params()),
                    ]
                ),
            ),
            (
                f"{disjoint_depth_range[0]-compensate_dist}-{disjoint_depth_range[0]}",
                OrderedDict(
                    [
                        ("k", 1),
                        ("delta", 0),
                        ("b", 0),
                        ("linear_model_params", linear_model1_params),
                    ]
                ),
            ),
            (
                f"{disjoint_depth_range[0]}-{disjoint_depth_range[1]}",
                OrderedDict(
                    [
                        ("k", k_),
                        ("delta", delta_),
                        ("b", b_),
                        ("linear_model_params", create_default_linear_model_params()),
                    ]
                ),
            ),
            (
                f"{disjoint_depth_range[1]}-{disjoint_depth_range[1]+compensate_dist*scaling_factor}",
                OrderedDict(
                    [
                        ("k", 1),
                        ("delta", 0),
                        ("b", 0),
                        ("linear_model_params", linear_model2_params),
                    ]
                ),
            ),
            (
                f"{disjoint_depth_range[1]+compensate_dist*scaling_factor}-{np.inf}",
                OrderedDict(
                    [
                        ("k", 1),
                        ("delta", 0),
                        ("b", 0),
                        ("linear_model_params", create_default_linear_model_params()),
                    ]
                ),
            ),
        ]
    )

    print(params_dict)

    json_dumper(params_dict, param_path)
    print("Generating done...")

    if plot:
        plot_linear(
            actual_depth,
            avg_50x50_anchor_disp,
            error,
            focal,
            baseline,
            (linear_model1, res, linear_model2),
            disjoint_depth_range,
            compensate_dist=compensate_dist,
            scaling_factor=scaling_factor,
            save_path=save_path,
        )

    params_matrix = np.zeros((5, 5), dtype=np.float32)
    params_matrix[0, :] = np.array([1, 0, 0, 1, 0])
    params_matrix[1, :] = np.array(
        [1, 0, 0, linear_model1.coef_[0], linear_model1.intercept_]
    )
    params_matrix[2, :] = np.array([k_, delta_, b_, 1, 0])
    params_matrix[3, :] = np.array(
        [1, 0, 0, linear_model2.coef_[0], linear_model2.intercept_]
    )
    params_matrix[4, :] = np.array([1, 0, 0, 1, 0])

    return params_matrix, focal, baseline